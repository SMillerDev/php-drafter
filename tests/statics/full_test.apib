FORMAT: 1A
HOST: https://alpha-api.app.net
ALT_HOST: https://acc.alpha-api.app.net, https://alpha-api.app.net
EXTRA_HOST: https://test.alpha-api.app.net
API_KEY_HEADER: X-API-Key
API_KEY_LOCK_ALL: false

# Real World API
This API Blueprint demonstrates a real world example documenting a portion of
[App.net API](http://developers.app.net).

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque laoreet tortor gravida, convallis turpis tempus, vulputate metus. In in efficitur libero. Proin non purus ac libero venenatis mollis eu ac massa. Proin lobortis et leo vel posuere. Curabitur cursus congue vestibulum. Vestibulum at pulvinar purus. Sed placerat augue ipsum, quis imperdiet libero consectetur nec. Vivamus est tortor, laoreet quis volutpat at, congue quis leo. Etiam diam arcu, molestie sed tincidunt in, aliquet et justo. Maecenas dui diam, commodo nec lacinia ultricies, auctor a ex. Nunc hendrerit posuere lacinia. Vestibulum condimentum diam eu tristique tincidunt. Maecenas nec tellus a metus interdum maximus. Vivamus tincidunt, dui pulvinar faucibus sodales, diam quam fermentum lectus, non tincidunt libero urna consequat leo.

Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec tristique justo mi, sed ornare libero porta quis. Sed dapibus gravida mauris quis porttitor. Donec egestas sem eget sodales suscipit. Sed interdum neque augue, id faucibus elit condimentum pellentesque. Mauris quis tortor ligula. Nulla facilisi. Cras finibus vestibulum lacus, et dapibus tortor convallis sed. Curabitur molestie velit faucibus ligula consequat, pretium ultricies nunc aliquam. Maecenas lacinia lacus eu lectus pellentesque eleifend. Mauris faucibus magna a dolor interdum, nec mollis neque finibus. Nullam vel consectetur lorem. Nullam convallis nibh quis leo laoreet pharetra. Morbi feugiat bibendum consectetur. Fusce a congue purus. Praesent semper sodales magna non efficitur.

NOTE: This document is a **work in progress**.

|Header1 |Header2  | Header3|
--- | --- | ---
|data1|data2|data3|
|data11|data12|data13|

# Group Posts
This section groups App.net post resources.

## Post [/stream/0/posts/{post_id}]
A Post is the other central object utilized by the App.net Stream API. It has
rich text and annotations which comprise all of the content a users sees in
their feed. Posts are closely tied to the follow graph...

+ Parameters
    + post_id: `1` (string, optional) - The [id](#id) of the Post.
        + Default: 2

+ Model (application/json)

    ```js
    {
        "data": {
            "id": "1", // note this is a string
            "user": {
                ...
            },
            "created_at": "2012-07-16T17:25:47Z",
            "text": "@berg FIRST post on this new site #newsocialnetwork",
            "html": "<span itemprop=\"mention\" data-mention-name=\"berg\" data-mention-id=\"2\">@berg</span> FIRST post on <a href=\"https://join.app.net\" rel=\"nofollow\">this new site</a> <span itemprop=\"hashtag\" data-hashtag-name=\"newsocialnetwork\">#newsocialnetwork</span>.",
            "source": {
                "client_id": "udxGzAVBdXwGtkHmvswR5MbMEeVnq6n4",
                "name": "Clientastic for iOS",
                "link": "http://app.net"
            },
            "machine_only": false,
            "reply_to": null,
            "thread_id": "1",
            "num_replies": 3,
            "num_reposts": 0,
            "num_stars": 0,
            "entities": {
                "mentions": [{
                    "name": "berg",
                    "id": "2",
                    "pos": 0,
                    "len": 5
                }],
                "hashtags": [{
                    "name": "newsocialnetwork",
                    "pos": 34,
                    "len": 17
                }],
                "links": [{
                    "text": "this new site",
                    "url": "https://join.app.net"
                    "pos": 20,
                    "len": 13
                }]
            },
            "you_reposted": false,
            "you_starred": false
        },
        "meta": {
            "code": 200,
        }
    }
    ```

### Retrieve a Post [GET]
Returns a specific Post.

+ Response 200

    [Post][]

### Update a Post [PUT]
Updates a specific Post.

+ Parameters
    + post_id: `2` (string, optional) - The id of the Post.
        + Default: 1

+ Attributes
    + Key: `key` (string) - Key for the object
    + Object
        + Key1: `key1` (string) - Key1 for the object
        + Key2: `key2` (string) - Key2 for the object

+ Request (application/json)

        {"test": true}
+ Request (application/xml)

        <xml></xml>
+ Request Something (application/xml)

        <xml></xml>

+ Response 200

    [Post][]

+ Response 204 (application/json)

+ Response 301 (application/json)

+ Response 302 (application/json)

+ Response 400 (application/json)

            { "post" : "invalid data" }


+ Response 400 (text/xml)

            Invalid DATA


+ Response 401 (application/json)

            { "post" : "not allowed" }


+ Response 403 (application/json)

            { "post" : "denied" }


### Delete a Post [DELETE]
Delete a Post. The current user must be the same user who created the Post. It
returns the deleted Post on success.

+ Response 204

## Posts Collection [/stream/0/posts]
A Collection of posts.

+ Model (application/json)

    ```js
    {
        "data": [
            {
                "id": "1", // note this is a string
                ...
            },
            {
                "id": "2",
                ...
            },
            {
                "id": "3",
                ...
            },
        ],
        "meta": {
            "code": 200,
        }
    }
    ```

### Create a Post [POST]
Create a new Post object. Mentions and hashtags will be parsed out of the post
text, as will bare URLs...

+ Request Normal

    [Post][]


+ Response 200 (application/schema+json ; hello=world)
    + Attributes
        + username: pavan

### Retrieve all Posts [GET]
Retrieves all posts.

+ Response 200

    [Posts Collection][]

## Stars [/stream/0/posts/{post_id}/star{?stuff,things}]
A User’s stars are visible to others, but they are not automatically added to
your followers’ streams.

+ Parameters
    + things: `1` (string) - Info on things
    + post_id: `1` (string) - The id of the Post.
        Some additional info
    + stuff: `hello` (enum[string], optional) - Some stuff info
        Some additional info
        + Default: `world`
        + Members
            + `hello`
            + `world`
            + `tests`

### Star a Post [PATCH]
Save a given Post to the current User’s stars. This is just a “save” action,
not a sharing action.

*Note: A repost cannot be starred. Please star the parent Post.*

+ Response 200

    [Post][]

### Check existence of a Post [HEAD]
Check if it exists

+ Response 200

### Connect to a Post [CONNECT]
Connect to a Post

+ Response 200

### Check post options [OPTIONS]
Check post options

+ Response 200

### Unstar a Post [DELETE]
Remove a Star from a Post.

+ Response 200 (application/xml)
    + Attributes
        + name: kyle

# Group Users

## User [/users]

### List all users [GET]

+ Relation: list

+ Response 200

        []

## User [/users/{id}]

+ Parameters
    + id: 23 (enum[number], optional) - Database ID

        Additional description

        + Default: 1

        + Members
            + 37 - Testing value
            + 1
            + 23

### Retrieve User [GET]
+ Request(application/json)
    + Headers

            X-API-Key: fdskhgfdskhgfhs
            X-server: nginx

+ Response 200 (application/json)

        {}

+ Response 204

## Users [/users{?limit}]
Manipulate users.

### List Users [GET]

+ Parameters
    + limit (number, optional) - The maximum number of users to return.
        + Default: `20`

+ Response 200 (application/json)

        [
          {
            "username": "pksunkara"
          },
          {
            "username": "kylef"
          }
        ]

+ Response 203 (application/json)
    + Attributes (array[User, Org])

+ Request Only one user
    + Headers

            X-server: nginx

    + Parameters
        + limit: 1
        + hello: world

+ Response 200 (application/json)

        [
          {
            "username": "pksunkara"
          }
        ]

## User [/users/{id}{?country,active,votes}]

### Retrieve User [GET]

+ Parameters
    + id: pavan (string, required) - Username
    + country
    + active (boolean)
    + votes (number)

+ Response 200 (application/json)

        {}

# Group Quiz

## Questions [/question]

### Create a New Question [POST]
You may create your own question using this action. It takes a JSON object
containing a question and a collection of answers in the form of choices.

+ Request (application/json)

    + Attributes

        + question: Favourite Language? (required)
        + choices: Swift, `Objective-C` (array, required)

    + Body

            {
              "question": "Favourite language?"
              "choices": [
                "Swift",
                "Objective-C"
              ]
            }

    + Schema

            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "type": "object",
              "properties": {
                "question": {
                  "type": "string"
                },
                "choices": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 2
                }
              }
            }

+ Response 204

## Question [/question/{id}]
### View a Question Detail [GET]
+ Relation: self

+ Response 204

### Delete a Question [DELETE]
+ Relation: delete

+ Response 204

### Answer a Question [POST]
+ Attribute (Answer)

+ Response 204

## Questions Collection [/questions]
### List All Questions [GET]
+ Relation: self

+ Response 200

        OK

# My Resource [/resource]

+ Model (text/plain)

        Hello World

## Retrieve My Resource [GET]

+ Response 200

    [My Resource][]

+ Response 400

    [My Resource][]

+ Response 401

    [My Resource][]

+ Response 403

    [My Resource][]

+ Response 500

    [My Resource][]

+ Response 501

    [My Resource][]

+ Response 502

    [My Resource][]

# Data Structures


## Org
An organization

### Properties
+ name: Apiary

## Company (Org)
+ vat: `1234556` (number, required) - VAT Number

## Answer
+ user (Person, required)
+ value:`A` (string, required, nullable) - Answer
+ colors (array, fixed-type)
    + red (string)

## `formal_person` (object)
+ prefix: Mr
+ Include Person

## Attribute key (string)
Key for attributes

## User (Person)
+ role (enum) - The user role
    + admin (string)
    + moderator (string)
+ attributes (Attributes)

## Stuff
+ enum_thing (Some simple enum, required, nullable) - Things
+ example_enum_thing: `item` (Some simple enum, required, nullable) - Things
+ default_enum_thing: `item` (Some simple enum, optional, nullable) - Things
    + Default: default item

## Some simple enum (enum)
+ item
+ another item
+ default item

## Some other enum (enum)
With a description

### Members
+ 5            (number) - An item
+ another item (string) - Yet another item

## Some simple array (array)
+ item
+ another item

## Some other array (array)
With a description

### Members
+ 5            (number) - An item
+ another item (string) - Yet another item


## Attributes
+ *rel (Attribute key)*: `value` (string, optional, nullable) - Some value

## Role (string)
The type of role

## Address Decorator(*T*)
+ address

## Person (object)
User of the application

### Properties
+ username: pavan
+ `first_name`
+ id: 5 (number) - Id of the user
+ colors (array, fixed)
    - red
    - *green*
+ address
    + street
    + city
    + zip: 1234 (number) - zip description
    + *variable*: trololo
+ array (array) - array description
    - 3
    - 4
    - 5
+ inline variable: *value* (string, required) - Can be anything
+ inline array: 1,2,3,four (array[number,string]) - desc
+ inline enum: red,green,blue (enum) - colors
+ multilined description - some dummy text

    and it continue there
    and will end there

## Nested Item (object)
+ Object (object)                   - Main object
    + string_l2 (string)            - String in L2
    + object_l2 (object)            - Object in L2
        + string_l3 (string)        - String in L3
        + object_l3 (object, fixed) - Object in L3
            + string1_l4 (string)   - String in L4
            + string2_l4 (string)   - String in L4
            + string3_l4 (string)   - String in L4


## Description only (object)
+ Object (object) - Main
    + test